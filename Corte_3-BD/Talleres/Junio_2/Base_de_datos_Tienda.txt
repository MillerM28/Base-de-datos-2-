CREATE DATABASE tienda_online;
USE tienda_online;

CREATE TABLE productos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100),
    precio DECIMAL(10,2),
    stock INT
);

CREATE TABLE ventas (
    id INT PRIMARY KEY AUTO_INCREMENT,
    producto_id INT,
    cantidad INT,
    fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (producto_id) REFERENCES productos(id)
);

CREATE TABLE inventario_historial (
    id INT PRIMARY KEY AUTO_INCREMENT,
    producto_id INT,
    cantidad_cambiada INT,
    fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    tipo_movimiento VARCHAR(20),
    FOREIGN KEY (producto_id) REFERENCES productos(id)
);

-- Insertar algunos datos iniciales en productos

INSERT INTO productos (nombre, precio, stock) VALUES
('Camiseta', 25.00, 100),
('Pantalon', 40.00, 50),
('Zapatos', 60.00, 30);

______________________________________________________________________________________________


-- ===================================
-- Disparador 1: actualizar stock y registrar venta en historial
-- ===================================
CREATE OR REPLACE FUNCTION actualizar_inventario_despues_venta()
RETURNS TRIGGER AS $$
BEGIN
    -- Actualizar stock del producto
    UPDATE productos SET stock = stock - NEW.cantidad WHERE id = NEW.producto_id;

    -- Registrar movimiento en inventario_historial
    INSERT INTO inventario_historial (producto_id, cantidad_cambiada, tipo_movimiento)
    VALUES (NEW.producto_id, -NEW.cantidad, 'Venta');

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_actualizar_inventario_despues_venta
AFTER INSERT ON ventas
FOR EACH ROW
EXECUTE FUNCTION actualizar_inventario_despues_venta();


-- ===================================
-- Disparador 2: validar stock antes de venta
-- ===================================
CREATE OR REPLACE FUNCTION validar_stock_antes_venta()
RETURNS TRIGGER AS $$
DECLARE
    stock_actual INT;
BEGIN
    SELECT stock INTO stock_actual FROM productos WHERE id = NEW.producto_id;
    IF NEW.cantidad > stock_actual THEN
        RAISE EXCEPTION 'Stock insuficiente para el producto %', NEW.producto_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_stock_antes_venta
BEFORE INSERT ON ventas
FOR EACH ROW
EXECUTE FUNCTION validar_stock_antes_venta();


-- ===================================
-- Disparador 3: registrar ajuste manual de stock
-- ===================================
CREATE OR REPLACE FUNCTION registrar_ajuste_stock()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.stock <> OLD.stock THEN
        INSERT INTO inventario_historial (producto_id, cantidad_cambiada, tipo_movimiento)
        VALUES (NEW.id, NEW.stock - OLD.stock, 'Ajuste');
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_registrar_ajuste_stock
AFTER UPDATE ON productos
FOR EACH ROW
EXECUTE FUNCTION registrar_ajuste_stock();


-- ================================
-- Inserts para probar los disparadores
-- ================================

-- Probar disparador 2: validación de stock (debe funcionar sin error)
INSERT INTO ventas(producto_id, cantidad) VALUES (1, 10);

-- Probar disparador 1: actualizar stock y registrar movimiento después de inserción en ventas
INSERT INTO ventas(producto_id, cantidad) VALUES (2, 5);

-- Probar disparador 2: validación de stock (debe fallar por insuficiencia)
-- Este insert generará error y no se ejecutará
-- INSERT INTO ventas(producto_id, cantidad) VALUES (3, 100);

-- Probar disparador 3: ajuste manual en stock
UPDATE productos SET stock = stock + 20 WHERE id = 1;









